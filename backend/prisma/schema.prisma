generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique @default(uuid())
  email    String @unique
  name     String
  phone    String
  password String
  role     Role

  patient Patient[]

  feedback Feedback[]

  Doctor Doctor[]
}

model Patient {
  id                     String   @id @unique @default(uuid())
  name                   String
  email                  String @unique
  phone                  String
  birthDate              DateTime
  gender                 String
  address                String
  occupation             String
  emergencyContactName   String
  emergencyContactNumber String
  primaryPhysician       String
  insuranceProvider      String?
  insurancePolicyNumber  String?
  allergies              String?
  currentMedication      String?
  familyMedicalHistory   String?
  pastMedicalHistory     String?
  identificationType     String
  identificationNumber   String
  identificationDocument String? // File path for the uploaded document
  privacyConsent         Boolean
  createdAt              DateTime @default(now())
  role                   Role     @default(patient)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  appointments Appointment[]

  doctorId String?
  doctor   Doctor? @relation(fields: [doctorId], references: [id])
}

model Doctor {
  id                 String @id @unique @default(uuid())
  firstName          String
  lastName           String
  email              String
  phone              String
  gender             String
  specialization     String
  licenseNumber      String
  registrationNumber String
  role               Role   @default(doctor)

  appointments Appointment[]
  patients     Patient[]

  userId String @unique
  user   User @relation(fields: [userId], references: [id])
}

model Appointment {
  id                String   @id @unique @default(uuid())
  schedule          DateTime
  status            Status @default(scheduled)
  primaryPhysician  String
  patientName       String
  reason            String
  // patient Patient[]
  cancelationReason String?

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])

  doctorId String?
  doctor   Doctor? @relation(fields: [doctorId], references: [id])
}

model Ambulance {
  id            String @id @unique @default(uuid())
  name          String
  licenseNumber String
  location      String
  onwer         String
}

model Feedback {
  id      String @id @unique @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

enum Role {
  doctor
  patient
  admin
}

enum Status {
  scheduled 
  approved
  canceled
}
